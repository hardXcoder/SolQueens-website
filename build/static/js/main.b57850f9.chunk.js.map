{"version":3,"sources":["connection.tsx","MintCountdown.tsx","Header.tsx","MintButton.tsx","degoddess.gif","degoddess2.gif","Home.tsx","Footer.tsx","Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts"],"names":["SequenceType","sendTransactions","connection","wallet","instructionSet","signersSet","a","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","console","log","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","StopOnFailure","Promise","all","number","txs","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","Header","candyMachine","Grid","container","direction","wrap","Typography","variant","state","itemsRedeemed","itemsAvailable","toDate","goLiveDate","isActive","isSoldOut","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","disabled","onClick","gatekeeper","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","open","severity","undefined","setAlertState","rpcUrl","rpcHost","useWallet","anchorWallet","useMemo","signTransaction","refreshCandyMachineState","useCallback","candyMachineId","getCandyMachineState","cndy","document","getElementById","click","connected","program","mintOneToken","mintTxId","txTimeout","msg","code","window","location","reload","indexOf","id","alt","src","degoddess","Container","maxWidth","backgroundColor","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","degoddess2","Footer","getFullYear","currentYear","Navbar","Component","createTheme","palette","type","anchor","process","getCandyMachineId","network","Connection","startDateSeed","parseInt","REACT_APP_CANDY_START_DATE","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","startDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","toNumber","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","getAtaForMint","mint","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","provider","preflightCommitment","fetchIdl","idl","account","fetch","itemsRemaining","endSettings","endSettingType","treasury","tokenMint","whitelistMintSettings","hiddenSettings","price","getMasterEdition","getMetadata","getCandyMachineCreator","Keypair","generate","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","expireOnUse","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t"],"mappings":"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","file":"static/js/main.b57850f9.chunk.js","sourcesContent":["import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.5),\n        marginRight: 0,\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: theme.spacing(1),\n      marginRight: 0,\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { toDate, formatNumber } from \"./utils\";\nimport { CandyMachineAccount } from \"./candy-machine\";\n\ntype HeaderProps = {\n  candyMachine?: CandyMachineAccount;\n};\n\nexport const Header = ({ candyMachine }: HeaderProps) => {\n  return (\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\n      <Grid container direction=\"row\" wrap=\"nowrap\">\n        {candyMachine && (\n          <Grid container direction=\"row\" wrap=\"nowrap\">\n            <Grid container direction=\"column\">\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Minted\n              </Typography>\n              <Typography\n                variant=\"h6\"\n                color=\"textPrimary\"\n                style={{\n                  fontWeight: \"bold\",\n                }}\n              >\n                <span className=\"gradTextFancyFontGreySmally\">\n                  {`${candyMachine?.state.itemsRedeemed} / ${candyMachine?.state.itemsAvailable}`}\n                </span>\n              </Typography>\n            </Grid>\n\n            <Grid container direction=\"column\">\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Price\n              </Typography>\n              <Typography\n                variant=\"h6\"\n                color=\"textPrimary\"\n                style={{ fontWeight: \"bold\" }}\n              >\n                {/* ◎ {formatNumber.asNumber(candyMachine?.state.price!)} */}\n                <span className=\"gradTextFancyFontGreySmally\"> 10 $DUST</span>\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n        <MintCountdown\n          date={toDate(candyMachine?.state.goLiveDate)}\n          style={{ justifyContent: \"flex-end\" }}\n          status={\n            !candyMachine?.state?.isActive || candyMachine?.state?.isSoldOut\n              ? \"COMPLETED\"\n              : \"LIVE\"\n          }\n        />\n      </Grid>\n    </Grid>\n  );\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState } from \"react\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  // background: linear-gradient(180deg, #b38728 0%, #fbf5b7 100%);\n  // background-image: linear-gradient(to top, #f77062 0%, #fe5196 100%);\n  background-image: linear-gradient(\n    to top,\n    #ff9a9e 0%,\n    #fecfef 99%,\n    #fecfef 100%\n  );\n\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n\n  return (\n    <CTAButton\n      disabled={\n        candyMachine?.state.isSoldOut ||\n        isMinting ||\n        !candyMachine?.state.isActive\n      }\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            setClicked(true);\n          } else {\n            await requestGatewayToken();\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {candyMachine?.state.isSoldOut ? (\n        \"SOLD OUT\"\n      ) : isMinting ? (\n        <CircularProgress />\n      ) : (\n        <>\n          <b className=\"gradTextFancyFontGreyRoll\"> MINT Goddess </b>\n        </>\n      )}\n    </CTAButton>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/degoddess.290750d0.gif\";","export default __webpack_public_path__ + \"static/media/degoddess2.e3d792fe.gif\";","import { useEffect, useMemo, useState, useCallback } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from \"./candy-machine\";\nimport { AlertState } from \"./utils\";\nimport { Header } from \"./Header\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport degoddess from \"./degoddess.gif\";\nimport degoddess2 from \"./degoddess2.gif\";\n\nimport heart from \"./heart.gif\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  // background-image: linear-gradient(to top, #ff0844 0%, #ffb199 100%);\n  background-image: linear-gradient(\n    to top,\n    #ff9a9e 0%,\n    #fecfef 99%,\n    #fecfef 100%\n  );\n\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection\n        );\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById(\"#identity\")?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n        }\n\n        if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction Timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <div id=\"hold\">\n      <div>\n        <h1 className=\"gradTextFancyFontPinkBig\">Only $DUST 🔓</h1>\n        {/* <p className=\"gradTextFancyFontWhiteSmall\">\n          We believe in $DUST and will strive to make it most utilizable\n          currency on GodLand\n        </p> */}\n      </div>\n      <div className=\"innerHold\">\n        <div className=\"inner col1\">\n          {/* <h2 className=\"gradTextFancyFontPink\">column won</h2> */}\n          <img alt=\" \" className=\"degoddessImage\" src={degoddess} />\n        </div>\n      </div>\n\n      <div className=\"innerHold\">\n        <div className=\"inner col2\">\n          {/* <h2 className=\"gradTextFancyFontPink\">column 2</h2> */}\n          <h2 className=\"gradTextFancyFontPinkDiff\">$Dust only MINT </h2>\n          <Container maxWidth=\"xs\">\n            <Paper\n              style={{\n                padding: 24,\n                backgroundColor: \"#1C1B1A\",\n                borderRadius: 6,\n              }}\n            >\n              {!wallet.connected ? (\n                <ConnectButton>Get your DeGod a Degoddess</ConnectButton>\n              ) : (\n                <>\n                  <Header candyMachine={candyMachine} />\n                  <MintContainer>\n                    {candyMachine?.state.isActive &&\n                    candyMachine?.state.gatekeeper &&\n                    wallet.publicKey &&\n                    wallet.signTransaction ? (\n                      <GatewayProvider\n                        wallet={{\n                          publicKey:\n                            wallet.publicKey ||\n                            new PublicKey(CANDY_MACHINE_PROGRAM),\n                          //@ts-ignore\n                          signTransaction: wallet.signTransaction,\n                        }}\n                        gatekeeperNetwork={\n                          candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                        }\n                        clusterUrl={rpcUrl}\n                        options={{ autoShowModal: false }}\n                      >\n                        <MintButton\n                          candyMachine={candyMachine}\n                          isMinting={isUserMinting}\n                          onMint={onMint}\n                        />\n                      </GatewayProvider>\n                    ) : (\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isUserMinting}\n                        onMint={onMint}\n                      />\n                    )}\n                  </MintContainer>\n                </>\n              )}\n            </Paper>\n          </Container>\n        </div>\n      </div>\n      <div className=\"innerHold\">\n        <div className=\"inner col3\">\n          <img alt=\" \" className=\"degoddessImage\" src={degoddess2} />\n        </div>\n      </div>\n      <div className=\"clear\"></div>\n\n      <br></br>\n      <br></br>\n      <br></br>\n      <br></br>\n\n      <p className=\"gradTextFancyFontWhiteSmall\">\n        We believe in $DUST and will strive to make it most utilizable currency\n        on GodLand\n      </p>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default function Footer() {\n  const [currentYear] = useState(new Date().getFullYear());\n  return (\n    <div className=\"footerDiv\">\n      <h4 className=\"copyright\">\n        <span className=\"gradTextFancyFontPinkFooter\">\n          Copyright &#169; {currentYear}{\" \"}\n        </span>\n        <span className=\"gradTextFancyFontPinkFooter\"> Degoddess</span>\n      </h4>\n\n      {/* <a href=\"https://discord.gg/akncVEYvRW\" className=\"discord\"> */}\n      {/* <FontAwesomeIcon icon={[\"fab\", \"github\"]} size=\"2x\" color=\"gold\" /> */}\n      {/* </a> */}\n      {/* <a href=\"https://twitter.com/SolQueensNFT\" className=\"twitter\"> */}\n      {/* <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} size=\"2x\" color=\"gold\" /> */}\n      {/* </a> */}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport styled from \"styled-components\";\n\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navBarItems\">\n        <div className=\"navbarLogo\">\n          <h2>\n            <span className=\"gradTextFancyFontPinkQW\">Degoddess.</span>\n          </h2>\n        </div>\n\n        <div className=\"connectWalletButtonNav\">\n          <ConnectButton className=\"gradientClass\">\n            <b>Connect Wallet</b>\n          </ConnectButton>\n        </div>\n      </nav>\n    );\n  }\n}\nexport default Navbar;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport Footer from \"./Footer\";\nimport Navbar from \"./Navbar\";\nimport QueenDisplay from \"./QueenDisplay\";\nimport Roadmap from \"./Roadmap\";\nimport MerchStore from \"./MerchStore\";\n\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { ThemeProvider, createTheme } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <div className=\"backgroundPaper\">\n              <Navbar />\n\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                startDate={startDateSeed}\n                txTimeout={txTimeoutInMilliseconds}\n                rpcHost={rpcHost}\n              />\n\n              <br></br>\n              <br></br>\n              <br></br>\n              <br></br>\n              <br></br>\n              <br></br>\n              {/* <Roadmap></Roadmap>\n              <MerchStore></MerchStore> */}\n              {/* <QueenDisplay></QueenDisplay> */}\n\n              <Footer />\n            </div>\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | [number, anchor.BN];\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}